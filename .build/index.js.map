{
  "version": 3,
  "sources": ["../index.ts"],
  "sourcesContent": ["import fs from 'fs';\n\nenum Direction {\n    Down = 1,\n    Up,\n    Left,\n    Right,\n}\n\nclass TreeVisibilityCounter {\n    treeVisibility: number[][];\n    direction: Direction;\n    maxLength: number;\n\n    constructor(direction: Direction, lines: string[]) {\n        this.direction = direction;\n        this.maxLength = lines.length;\n        this.treeVisibility = new Array(this.maxLength);\n        for (let i = 0; i < this.maxLength; i++) {\n            this.treeVisibility[i] = [];\n        }\n\n        this.addVisibities(lines);\n    }\n\n    countLines() {\n        console.log(this.treeVisibility.length);\n    }\n\n    containsTree(x: number, y: number) {\n        if (this.checkVertical())\n            return this.treeVisibility[x].includes(y);\n\n        return this.treeVisibility[y].includes(x);\n    }\n\n    addTree(x: number, y: number) {        \n        var index = this.checkVertical() ? x : y;\n        var item = this.checkVertical() ? y : x;\n\n        var positions = this.treeVisibility[index];\n        if (!positions.includes(item))\n            positions.push(item); \n    }\n\n    addVisibities(lines: string[]) {\n        for (let i = 0; i < this.maxLength; i++) {\n            this.addVisibility(i, lines);\n        }\n    }\n\n    addVisibility(index: number, lines: string[]) {\n        var maxHeight = -1;\n\n        for (let i = 0; i < this.maxLength; i++) {\n            var [x, y] = this.getXY(index, i);\n            var treeHeight = parseInt(lines[y][x]);\n\n            if (treeHeight > maxHeight) {\n                this.addTree(x, y);\n\n                maxHeight = treeHeight;\n\n                if (maxHeight == 9)\n                    return;\n            }        \n        }\n    }\n\n    getXY(index: number, step: number): [number, number] {\n        if (this.direction == Direction.Left) {\n            return [step, index];\n        } else if (this.direction == Direction.Right) {\n            return [this.maxLength - 1 - step, index];\n        } else if (this.direction == Direction.Up) {\n            return [index, step];\n        } else { // Down\n            return [index, this.maxLength - 1 - step];\n        }\n    }\n\n    checkVertical(): boolean {\n        return this.direction == Direction.Up || this.direction == Direction.Down;\n    }\n\n    checkHorizontal(): boolean {\n        return !this.checkVertical();\n    }\n\n    countTrees(notIn: TreeVisibilityCounter[]) {\n        var count = 0;\n\n        for (let index = 0; index < this.maxLength; index++) {\n            for (let j = 0; j < this.treeVisibility[index].length; j++) {\n                var offset = this.treeVisibility[index][j];\n\n                var [x, y] = this.checkVertical() ? [index, offset] : [offset, index];\n                \n                if (!notIn.some(tvc => tvc.containsTree(x, y))) {\n                    count++;\n                }             \n            }\n        }\n\n        return count;\n    }\n\n    printDict() {\n        for (let index = 0; index < this.maxLength; index++) {\n            console.log(\"Index = \" + index);\n            for (let j = 0; j < this.treeVisibility[index].length; j++) {\n                var treeOffset = this.treeVisibility[index][j];\n                \n                if (this.checkVertical())\n                    console.log(`  (${index},${treeOffset})`);\n                else\n                    console.log(`  (${treeOffset},${index})`);\n            }\n        }\n    }\n}\n\nfunction readFile(fileName: string): string[] {\n    const allFileContents = fs.readFileSync(fileName, 'utf-8');\n    var lines: [string] = allFileContents.split(/\\r?\\n/);\n    lines.forEach(line => {\n        console.log(`Line from file: ${line}`);\n    });\n\n    return lines;\n}\n\nfunction getMaxViewingDistance(lines: string[]): number {\n    var maxViewingDistance = 0;\n\n    for (let y = 0; y < lines.length; y++)\n        for (let x = 0; x < lines[y].length; x++) {\n            var up = viewingDistance(x, y, Direction.Up);\n            var down = viewingDistance(x, y, Direction.Down);\n            var left = viewingDistance(x, y, Direction.Left);\n            var right = viewingDistance(x, y, Direction.Right);\n\n            var res = up * down * left * right;\n\n            if (res > maxViewingDistance)\n                maxViewingDistance = res;\n        }\n\n    return maxViewingDistance;\n}\n\nfunction viewingDistance(x: number, y: number, direction: Direction): number {\n    return 1; // Continue here\n} \n\nvar lines = readFile('Input.txt');\nvar maxView = getMaxViewingDistance(lines);\n\nconsole.log(maxView);\n\n"],
  "mappings": "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",
  "names": []
}
