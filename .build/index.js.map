{
  "version": 3,
  "sources": ["../index.ts"],
  "sourcesContent": ["import fs from 'fs';\n\nenum Direction {\n    Down = 1,\n    Up,\n    Left,\n    Right,\n}\n\nenum TreeView {\n    Visible = 1,\n    Invisible,\n    End\n}\n\nfunction readFile(fileName: string): number[][] {\n    const allFileContents = fs.readFileSync(fileName, 'utf-8');\n    var lines: string[] = allFileContents.split(/\\r?\\n/);\n    \n\n    var heights: number[][] = [];\n    lines.forEach(line => {\n        var height = line.split(\"\").map(c => parseInt(c))\n        console.log(height.map(n => n + \"\").join(\"\"));\n        heights.push(height);\n    });\n\n    return heights;\n}\n\nfunction getMaxViewingDistance(heights: number[][]): number {\n    var maxViewingDistance = 0;\n\n    for (let y = 0; y < heights.length; y++)\n        for (let x = 0; x < heights[y].length; x++) {\n            var up = viewingDistance(heights, x, y, Direction.Up);\n            var down = viewingDistance(heights,x, y, Direction.Down);\n            var left = viewingDistance(heights,x, y, Direction.Left);\n            var right = viewingDistance(heights,x, y, Direction.Right);\n\n            // if (x == 2 && y == 3)\n            //     console.log(`Up: ${up}, Down: ${down}, Left: ${left}, Right: ${right}`);\n\n            var res = Math.max(1, up) * Math.max(1, down) * Math.max(1, left) * Math.max(1, right);\n            console.log(`Viewing for (${x},${y}) = ${res}, (${up} ${down} ${left} ${right})`)\n\n            if (res > maxViewingDistance) {\n                maxViewingDistance = res;                \n            }\n        }\n\n    return maxViewingDistance;\n}\n\nfunction viewingDistance(heights: number[][], x: number, y: number, direction: Direction): number {\n    var treeHutHeight = heights[y][x];\n    var maxHeight = 0;\n\n    var visible = 0;\n    \n    for (let i = 1; ;i++ ) {\n        var [xNext, yNext] = getPos(x, y, direction, i);\n\n        if (!isAccessible(heights, xNext, yNext))\n            return visible;\n\n        var nextTree = heights[yNext][xNext];\n        if (canSee(heights, x, y, xNext, yNext)) {\n            visible++;\n            maxHeight = nextTree;\n        }\n\n        if (nextTree > treeHutHeight)\n            return visible;\n    }\n}\n\nfunction canSee(heights: number[][], xTree: number, yTree: number, x: number, y: number): boolean {\n    var nums: number[] = [];\n\n    var xStep = getStep(xTree, x);\n    var yStep = getStep(yTree, y);\n    var numSteps = Math.abs(xTree - x) + Math.abs(yTree - y);\n    \n    for (let i = 1; i <= numSteps; i++) {\n        var tree = heights[yTree + yStep*i][xTree + xStep*i];\n        nums.push(tree);        \n    }\n\n    return canSeeNums(nums);\n}\n\nfunction getStep(from: number, to: number): number {\n    if (from == to) {\n        return 0;\n    } else if (from < to ) {\n        return 1;\n    } else {\n        return -1;\n    }\n}\n\nfunction canSeeNums(nums: number[]): boolean {\n    if (nums.length == 1)\n        return true;\n\n    return false;\n}\n\nfunction isAccessible(heights: number[][], x: number, y: number): boolean {\n    return x >= 0 && x < heights[0].length && y >= 0 && y < heights.length;\n} \n\nfunction getPos(x: number, y:number, direction: Direction, step: number): [number, number] {\n    if (direction == Direction.Right) {\n        return [x + step, y];\n    } else if (direction == Direction.Left) {\n        return [x - step, y];\n    } else if (direction == Direction.Up) {\n        return [x, y - step]; \n    } else { // Down\n        return [x, y + step];         \n    }\n}\n\nvar heights = readFile('Example.txt');\nvar maxView = getMaxViewingDistance(heights);\n\nconsole.log(maxView); // 8736 too low\n\n"],
  "mappings": "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",
  "names": []
}
