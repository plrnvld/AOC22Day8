{
  "version": 3,
  "sources": ["../index.ts"],
  "sourcesContent": ["import fs from 'fs';\n\nenum Direction {\n    Down = 1,\n    Up,\n    Left,\n    Right,\n}\n\nfunction readFile(fileName: string): number[][] {\n    const allFileContents = fs.readFileSync(fileName, 'utf-8');\n    let lines: string[] = allFileContents.split(/\\r?\\n/);\n\n    let heights: number[][] = [];\n    lines.forEach(line => {\n        let height = line.split(\"\").map(c => parseInt(c))\n        console.log(height.map(n => n + \"\").join(\"\"));\n        heights.push(height);\n    });\n\n    return heights;\n}\n\nfunction getMaxViewingDistance(heights: number[][]): number {\n    let maxRes = 0;\n\n    for (let y = 0; y < heights.length; y++) {\n        for (let x = 0; x < heights[y].length; x++) {\n            var up = viewingDistance(heights, x, y, Direction.Up);\n            var down = viewingDistance(heights, x, y, Direction.Down);\n            var left = viewingDistance(heights, x, y, Direction.Left);\n            var right = viewingDistance(heights, x, y, Direction.Right);\n\n            var res = [up, down, left, right].filter(x => x > 0).reduce((acc, curr) => acc * curr, 1);\n\n            maxRes = Math.max(res, maxRes);\n        }\n    }\n\n    return maxRes;\n}\n\nfunction viewingDistance(heights: number[][], x: number, y: number, direction: Direction): number {\n    let treeHutHeight = heights[y][x];\n    let trees = getTreeRow(heights, x, y, direction); \n    return countVisibleTreesBetter(treeHutHeight, trees);;\n}\n\nfunction getTreeRow(heights: number[][], x: number, y: number, direction: Direction): number[] {\n    let trees: number[] = [];\n    \n    let minX = 0;\n    let maxX = heights[0].length - 1;\n    let minY = 0;\n    let maxY = heights.length - 1;\n\n    let stepX = 0;\n    let stepY = 0;\n\n    if (direction == Direction.Left) {\n        stepX = -1;\n    } else if (direction == Direction.Right) {\n        stepX = 1;\n    } else if (direction == Direction.Down) {\n        stepY = 1;\n    } else {\n        stepY = -1\n    }\n\n    let [nextX, nextY] = [x + stepX, y + stepY];\n\n    while (nextX >= minX && nextX <= maxX && nextY >= minY && nextY <= maxY) {\n        trees.push(heights[nextY][nextX]);\n        \n        [nextX, nextY] = [nextX + stepX, nextY + stepY]\n    }\n\n    return trees;\n}\n\nfunction countVisibleTreesBetter(treeHutHeight: number, trees: number[]): number {\n    let visible = 0;\n    \n    for (let i = 0; i < trees.length; i++) {\n        let tree = trees[i];\n        visible++;\n\n        if (tree >= treeHutHeight) {            \n            return visible;\n        }   \n    }\n    \n    return visible;\n}\n\nlet heights = readFile('Input.txt');\nlet maxView = getMaxViewingDistance(heights);\n\nconsole.log(maxView); // 8736 too low"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA,gBAAe;AAEf,IAAK;AAAL,UAAK,YAAL;AACI,kCAAO,KAAP;AACA;AACA;AACA;AAAA,GAJC;AAOL,kBAAkB,UAA8B;AAC5C,QAAM,kBAAkB,kBAAG,aAAa,UAAU;AAClD,MAAI,QAAkB,gBAAgB,MAAM;AAE5C,MAAI,WAAsB;AAC1B,QAAM,QAAQ,UAAQ;AAClB,QAAI,SAAS,KAAK,MAAM,IAAI,IAAI,OAAK,SAAS;AAC9C,YAAQ,IAAI,OAAO,IAAI,OAAK,IAAI,IAAI,KAAK;AACzC,aAAQ,KAAK;AAAA;AAGjB,SAAO;AAAA;AAGX,+BAA+B,UAA6B;AACxD,MAAI,SAAS;AAEb,WAAS,IAAI,GAAG,IAAI,SAAQ,QAAQ,KAAK;AACrC,aAAS,IAAI,GAAG,IAAI,SAAQ,GAAG,QAAQ,KAAK;AACxC,UAAI,KAAK,gBAAgB,UAAS,GAAG,GAAG;AACxC,UAAI,OAAO,gBAAgB,UAAS,GAAG,GAAG;AAC1C,UAAI,OAAO,gBAAgB,UAAS,GAAG,GAAG;AAC1C,UAAI,QAAQ,gBAAgB,UAAS,GAAG,GAAG;AAE3C,UAAI,MAAM,CAAC,IAAI,MAAM,MAAM,OAAO,OAAO,QAAK,KAAI,GAAG,OAAO,CAAC,KAAK,SAAS,MAAM,MAAM;AAEvF,eAAS,KAAK,IAAI,KAAK;AAAA;AAAA;AAI/B,SAAO;AAAA;AAGX,yBAAyB,UAAqB,GAAW,GAAW,WAA8B;AAC9F,MAAI,gBAAgB,SAAQ,GAAG;AAC/B,MAAI,QAAQ,WAAW,UAAS,GAAG,GAAG;AACtC,SAAO,wBAAwB,eAAe;AAAO;AAAA;AAGzD,oBAAoB,UAAqB,GAAW,GAAW,WAAgC;AAC3F,MAAI,QAAkB;AAEtB,MAAI,OAAO;AACX,MAAI,OAAO,SAAQ,GAAG,SAAS;AAC/B,MAAI,OAAO;AACX,MAAI,OAAO,SAAQ,SAAS;AAE5B,MAAI,QAAQ;AACZ,MAAI,QAAQ;AAEZ,MAAI,aAAa,GAAgB;AAC7B,YAAQ;AAAA,aACD,aAAa,GAAiB;AACrC,YAAQ;AAAA,aACD,aAAa,GAAgB;AACpC,YAAQ;AAAA,SACL;AACH,YAAQ;AAAA;AAGZ,MAAI,CAAC,OAAO,SAAS,CAAC,IAAI,OAAO,IAAI;AAErC,SAAO,SAAS,QAAQ,SAAS,QAAQ,SAAS,QAAQ,SAAS,MAAM;AACrE,UAAM,KAAK,SAAQ,OAAO;AAE1B,KAAC,OAAO,SAAS,CAAC,QAAQ,OAAO,QAAQ;AAAA;AAG7C,SAAO;AAAA;AAGX,iCAAiC,eAAuB,OAAyB;AAC7E,MAAI,UAAU;AAEd,WAAS,IAAI,GAAG,IAAI,MAAM,QAAQ,KAAK;AACnC,QAAI,OAAO,MAAM;AACjB;AAEA,QAAI,QAAQ,eAAe;AACvB,aAAO;AAAA;AAAA;AAIf,SAAO;AAAA;AAGX,IAAI,UAAU,SAAS;AACvB,IAAI,UAAU,sBAAsB;AAEpC,QAAQ,IAAI;",
  "names": []
}
